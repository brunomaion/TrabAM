# -*- coding: utf-8 -*-
"""Aula 19/09/2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14xtIEvMJX9sMcEeZ-P7mKn0hCJHb1JTT
"""

import pandas as pd
import sklearn as sk
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
#dados = pd.read_csv("Banana.csv")
dados = pd.read_csv("Mammo.csv")
#dados = pd.read_csv("Faults.csv",header=None)

dados.head()

df_dados = pd.DataFrame(dados)
#df_dados.info()
#figura = df_dados.plot.scatter(x='A1',y='A2',c='Class',colormap='rainbow')

from sklearn.model_selection import train_test_split
x_treino,x_temp,y_treino,y_temp=train_test_split(df_dados,dados["Severity"],test_size=0.5,stratify=dados["Severity"])
x_validacao,x_teste,y_validacao,y_teste=train_test_split(x_temp,y_temp,test_size=0.5, stratify = y_temp)
print("Treino")
x_treino.info()
y_treino.info()
print("\nValidação")
x_validacao.info()
y_validacao.info()
print("\nTeste")
x_teste.info()
y_teste.info()

"""Plotando a Curva ROC"""

import matplotlib.pyplot as plt

from sklearn import metrics
def plot_roc_curve(fper, tper,cor,classsificador):
    plt.plot(fper, tper, color=cor, label=classsificador)
    plt.plot([0, 1], [0, 1], color="green", linestyle='--')
    plt.xlabel('Taxa de Falsos Positivos (FPR)')
    plt.ylabel('Taxa de Verdadeiros Positivos (TPR)')
    plt.title('Curva ROC')
    plt.legend()

from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn import metrics

from sklearn.neighbors import KNeighborsClassifier
KNN = KNeighborsClassifier()
KNN.fit(x_treino,y_treino)
opiniao = KNN.predict(x_teste)
print("\nDesempenho do KNN")
print(classification_report(y_teste,opiniao))
y_score = KNN.predict_proba(x_teste)[:,1]
fpr, tpr, thresholds = metrics.roc_curve(y_teste,y_score,pos_label=2)
print("AUC KNN: ",metrics.auc(fpr,tpr))
plot_roc_curve(fpr, tpr,"red","KNN")

from sklearn.naive_bayes import GaussianNB
NB = GaussianNB()
NB.fit(x_treino,y_treino)
opiniao = NB.predict(x_teste)
print("\nDesempenho do Naive Bayes")
print(classification_report(y_teste,opiniao))
y_score = NB.predict_proba(x_teste)[:,1]
fpr, tpr, thresholds = metrics.roc_curve(y_teste,y_score,pos_label=2)
print("AUC NB: ",metrics.auc(fpr,tpr))
plot_roc_curve(fpr, tpr,"blue","NaiVe Bayes")

from sklearn import tree
DT = tree.DecisionTreeClassifier()
DT.fit(x_treino,y_treino)
opiniao = DT.predict(x_teste)
print("\nDesempenho da Árvore de Decisão")
print(classification_report(y_teste,opiniao))
y_score = DT.predict_proba(x_teste)[:,1]
fpr, tpr, thresholds = metrics.roc_curve(y_teste,y_score,pos_label=2)
print("AUC DT: ",metrics.auc(fpr,tpr))
plot_roc_curve(fpr, tpr,"black","DT")

from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier()
RF.fit(x_treino,y_treino)
opiniao = RF.predict(x_teste)
print("\nDesempenho do Random Forest")
print(classification_report(y_teste,opiniao))
y_score = RF.predict_proba(x_teste)[:,1]
fpr, tpr, thresholds = metrics.roc_curve(y_teste,y_score,pos_label=2)
print("AUC RF: ",metrics.auc(fpr,tpr))
plot_roc_curve(fpr, tpr,"yellow","RF")