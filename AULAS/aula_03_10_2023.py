# -*- coding: utf-8 -*-
"""Aula 03/10/2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D9yY8YxR8whUC98uVEKt9qVpgK31fsrK

Importante bibliotecas
"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import pandas as pd
import numpy as np

"""Gerando conjunto de dados"""

from sklearn.datasets import make_blobs
data = make_blobs(n_samples=2000,n_features=2,centers=4,cluster_std=1,random_state=11)
plt.figure(figsize=(8,5))
plt.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap="rainbow")

"""**Executando o Kmeans**

n_clusters int, default=8

max_iter int, default=300

random_state int, RandomState instance or None, default=None
"""

from sklearn.cluster import KMeans
from sklearn import metrics
kmeans = KMeans(n_clusters=4, random_state=0)
kmeans.fit(data[0])
centro = kmeans.cluster_centers_
print(centro)
X = kmeans.labels_

"""**Comparando dados originais com a saída do Kmeans**


"""

f,(ax1,ax2)=plt.subplots(1,2,sharey=True,figsize=(15,5))
ax1.set_title("KMeans")
ax1.scatter(data[0][:,0],data[0][:,1],c=X,cmap="rainbow")
ax1.scatter(centro[:,0],centro[:,1],color='black')
ax2.set_title("Original")
ax2.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap="rainbow")

"""**Executando o DBSCAN**

eps float, default=0.5

min_samples int, default=5


"""

from sklearn import metrics
from sklearn.cluster import DBSCAN

db = DBSCAN(eps=0.7, min_samples=10)
db.fit(data[0])
X = db.labels_

"""**Plotando os resultados do DBScan**"""

f,(ax1,ax2)=plt.subplots(1,2,sharey=True,figsize=(15,5))
ax1.set_title("DBScan")
ax1.scatter(data[0][:,0],data[0][:,1],c=X,cmap="rainbow")
ax2.set_title("Original")
ax2.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap="rainbow")

"""**Executando uma estratégia Aglomerativa (AGNES)**

*   n_clusters int or None, default=2
*   linkage{‘ward’, ‘complete’, ‘average’, ‘single’}, default=’ward’


"""

from sklearn.cluster import AgglomerativeClustering
Agnes = AgglomerativeClustering(n_clusters=4)
Agnes.fit(data[0])
X = Agnes.labels_

"""**Plotando os resultados do AGNES**"""

f,(ax1,ax2)=plt.subplots(1,2,sharey=True,figsize=(15,5))
ax1.set_title("AGNES")
ax1.scatter(data[0][:,0],data[0][:,1],c=X,cmap="rainbow")
ax2.set_title("Original")
ax2.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap="rainbow")